# IMPORTANT: Generate a strong Redis password (at least 32 characters, alphanumeric + symbols)
# Store it in ./secrets/redis_password.txt for Docker secrets
# REDIS_PASSWORD is sourced from secret in production; set locally only for development
# REDIS_PASSWORD=your_very_strong_redis_password_here_min_32_chars

# Use rediss:// for TLS in production
REDIS_URL=rediss://:your_password@localhost:6380
# For non-TLS dev: REDIS_URL=redis://:your_password@localhost:6379

# TLS Configuration (required for production with REDIS_USE_TLS=true)
# Paths to certificate files (mount via volumes in Docker)
REDIS_USE_TLS=true
REDIS_TLS_CA=./certs/redis/ca.crt
REDIS_TLS_CERT=./certs/redis/redis-client.crt
REDIS_TLS_KEY=./certs/redis/redis-client.key

DANBOORU_LOGIN=your_login
DANBOORU_API_KEY=your_api_key

RATE_LIMIT_PER_MINUTE=60
CACHE_TTL_SECONDS=3600
DANBOORU_LIMIT=1
DANBOORU_RANDOM=true
API_SECRET=your_api_secret

# ENCRYPTION_KEY for AES-256 query encryption in Redis
# Generate using: node -e "const crypto = require('crypto'); console.log(crypto.randomBytes(32).toString('hex'));"
# or in code: import { generateEncryptionKey } from './src/common/crypto/crypto.util'; console.log(generateEncryptionKey());
# Must be exactly 32 random bytes as 64-character hex string. Store securely!
# Example (REPLACE WITH YOUR OWN GENERATED KEY):
ENCRYPTION_KEY=your_32_byte_hex_key_here_64_chars_exactly_like_this_but_random
