services:
  redis:
    image: redis:alpine
    command: sh -c 'redis-server --tls-port 6380 --port 0 --appendonly yes --requirepass "$$(cat /run/secrets/redis_password)" --tls-cert-file /certs/redis/redis-server.crt --tls-key-file /certs/redis/redis-server.key --tls-ca-cert-file /certs/redis/ca.crt --tls-auth-clients no --tls-protocols "TLSv1.2 TLSv1.3"'
    volumes:
      - redis_data:/data
      - ./certs/redis:/certs/redis:ro
    secrets:
      - redis_password
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -h localhost -p 6380 --tls --cacert /certs/redis/ca.crt -a \"$$(cat /run/secrets/redis_password)\" ping || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  danbooru-worker:
    build: .
    command: >
      sh -c "export REDIS_PASSWORD=$$(cat /run/secrets/redis_password) && npm run start:prod"
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_USE_TLS=true
      - REDIS_URL=rediss://:@redis:6380
      - REDIS_TLS_CA=/certs/redis/ca.crt
      - REDIS_TLS_CERT=/certs/redis/redis-client.crt
      - REDIS_TLS_KEY=/certs/redis/redis-client.key
      - DANBOORU_LOGIN=${DANBOORU_LOGIN}
      - DANBOORU_API_KEY=${DANBOORU_API_KEY}
      - RATE_LIMIT_PER_MINUTE=60
      - CACHE_TTL_SECONDS=3600
      - DANBOORU_LIMIT=1
      - DANBOORU_RANDOM=true
      - API_SECRET=${API_SECRET}
    volumes:
      - ./certs/redis:/certs/redis:ro
    secrets:
      - redis_password
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -h redis -p 6380 --tls --cacert /certs/redis/ca.crt -a \"$REDIS_PASSWORD\" ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  redis_data:

secrets:
  redis_password:
    file: ./secrets/redis_password.txt
